
import java.io.Serializable;
import java.util.Scanner;

/**
 * A video class that extends media and implements comparable objects.
 * @author koeppkm2
 *
 */
public class Video extends Media implements Serializable, Comparable<Video> {
    
    // Serial number for Binary files:
    private static final long serialVersionUID = -7792411088273323539L;
    
    private String mpaa;
    
    private boolean hdcp;
    
    private String videoFormat = "Video\t%s\t%s\t%d\t%.2f\t%s\t%b";
    
    /**
     * Simple constructor method, uses Media constructor.
     * @param upc the UPC
     * @param title the Title
     * @param year the Year
     */
    public Video(String upc, String title, int year) {
        super(upc, title, year);
        
    } // end constructor.
    
    /**
     * Gets the mpaa of a video.
     * @return the mpaa.
     */
    public String getMpaa() {
        return mpaa;
        
    } // end getMpaa method.
    
    /**
     * Sets the mpaa of a video.
     * @param m the mpaa to set.
     */
    public void setMpaa(String m) {
        mpaa = m;
        
    } // end setMpaa method.
    
    /**
     * Checks the hdcp of a video.
     * @return value of hdcp.
     */
    public boolean isHdcp() {
        return hdcp;
        
    }
    
    /**
     * Sets the value of hdcp.
     * @param h the value to set to video's hdcp.
     */
    public void setHdcp(boolean h) {
        hdcp = h;
        
    } // end hdcp method.
    
    /**
     * Compares two videos by mpaa, price, and title, 
     * Overrides java.Object method.
     * @param v the video to compare to invoked video
     * @return the compare value as an integer..
     */
    public int compareTo(Video v) {
        
        if (!mpaa.equals(v.getMpaa())) {
            return ((String)mpaa).compareTo(((String)v.getMpaa()));
            
        } else if (!(this.getPrice() == v.getPrice())) {
            return ((Float)this.getPrice()).compareTo(((Float)v.getPrice()));
            
        } else {
            return ((String)this.getTitle()).compareTo(((String)v.getTitle()));
            
        }
        
    } // end comapareTo method.
    
    /**
     * Returns Video in the format of a String.
     * @return the String containing Video info.
     */
    @Override
    public String toString() {
        return String.format(videoFormat, this.getUpc(), this.getTitle(), 
                this.getYear(), this.getPrice(), mpaa, hdcp);
        
    } // end toString method.
    
    /**
     * Loads the video from a file using a scanner.
     * @param data for media item generated by toString.
     * @return the new Video created from the scanner.
     */
    public static Video load(String info) {
        
        // Create new Scanner and delimiter:
        Scanner ip = new Scanner(info);
        ip.useDelimiter("\t");
        ip.next();
        
        // Create new video and copy attributes using scanner:
        Video v = new Video(ip.next(), ip.next(), ip.nextInt());
        v.setPrice(ip.nextFloat());
        v.setMpaa(ip.next());
        v.setHdcp(ip.nextBoolean());
        
        // Close scanner and return:
        ip.close();
        return v;
        
    } // end load method.
    
} // end class.